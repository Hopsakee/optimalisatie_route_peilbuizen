"""Module die alle functies bevat die nodig zijn om de snelste route te vinden langs een gegeven serie locaties."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/02_route_get.ipynb.

# %% auto 0
__all__ = ['client', 'get_lonlat_start_location', 'df_to_longlat_tuple', 'create_optimized_route']

# %% ../../nbs/02_route_get.ipynb 3
from datetime import datetime
import os

import pandas as pd
import numpy as np
from fastcore.utils import L

import openrouteservice
from geopy.geocoders import Nominatim

from .data_get import get_data_from_azuresql
from .utils import load_settings

# %% ../../nbs/02_route_get.ipynb 8
client = openrouteservice.Client(key=os.environ["OPENROUTESERVICE_KEY"])

# %% ../../nbs/02_route_get.ipynb 10
def get_lonlat_start_location(address: str = "Dokter van Deenweg 186, 8025 BM, Zwolle"):
    """Get the longitude and latitude coordinates from a given adress"""
    geolocator = Nominatim(user_agent="wdodelta_route_optimizer", timeout=10)
    max_retries = 3
    retry_delay = 2

    for attempt in range(max_retries):
        try:
            location = geolocator.geocode(address)
            if location:
                return (location.longitude, location.latitude)
            else:
                print(f"Warning: Could not find coordinates for adress: {address}")
                return None
        except GeocoderTimedOut:
            if attempt < max_retries - 1:
                print(f"Warning: Geocoder timed out, attempt {attempt + 1}/{max_retries}. Retrying...")
                time.sleep(retry_delay)
            else:
                print(f"Error: Geocoder timed out after {max_retries} attempts")
                return None
        except GeocoderServiceError as e:
            print(f"Error: Geocoding service error - {str(e)}")
            return None
        except Exception as e:
            print(f"Error: Unexpected error during geocoding - {str(e)}")
            return None

# %% ../../nbs/02_route_get.ipynb 12
def df_to_longlat_tuple(df, longitude_column, latitude_column):
    """Get the longitude and latitude coordinates from all rows in a pandas dataframe
    and return a list of longitude, latitude tuples"""
    return [(row[longitude_column], row[latitude_column]) for _, row in df.iterrows()]

# %% ../../nbs/02_route_get.ipynb 17
def create_optimized_route(start_address: str, # De startlocatie en eindlocatie opgegeven als adres
                           df: pd.DataFrame, # Dataframe met peilbuizen en coordinaten in WGS84
                           route_profile: str, # Het route profiel (transport methode) waarvoor de route berekend moet worden
                           long_clmn: str="Longitude", # Dataframe kolomnaam met de longitude coordinaten in WGS84
                           lat_clmn: str="latitude" # Dataframe kolomnaam met de latitude coordinaten in WGS84
                           ):
    """Solve the traveling salesman problem (visit all given points exactly once in the 
    shortes possible route) for a given start adress and pandas dataframe with longitude
    and latitude columns."""
    start_coords = get_lonlat_start_location(start_address)
    peilbuizen_coords = df_to_longlat_tuple(df, longitude_column=long_clmn, latitude_column=lat_clmn)
    total_coords = L([start_coords] + peilbuizen_coords + [start_coords])
    return client.directions(total_coords,
                           profile=route_profile,
                           optimize_waypoints=True,
                           instructions=False,
                           geometry=True,
                           format='geojson',
                           preference='fastest',
                           radiuses=-1 # Don't restrict radius to search for routepoint near peilbuis,
                           
    )

