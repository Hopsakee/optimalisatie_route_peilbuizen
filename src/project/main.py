"""Module die alle functies die nodig zijn om de snelste route te vinden langs alle peilbuizen gegroepeerd per project."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_main.ipynb.

# %% auto 0
__all__ = ['project_root', 'use_pickle', 'df_grouped', 'test_df_group', 'test_name_group', 'df_random_test', 'create_group_route',
           'process_peilbuizen_routes']

# %% ../../nbs/00_main.ipynb 3
import yaml
import pandas as pd
import logging
from datetime import datetime
from fastcore.utils import Path
from tqdm import tqdm

from .data_get import get_data_from_azuresql, load_pickle
from .route_get import create_optimized_route
from .data_export import get_waypoint_coords, convert_routejson_to_df, create_route_prev_next, google_maps_route_url
from .utils import get_project_root, make_filesystem_friendly, save_route_url, setup_logging

# %% ../../nbs/00_main.ipynb 5
project_root = get_project_root()

with open(project_root / 'settings.yaml', 'r') as f:
    settings = yaml.safe_load(f)

# %% ../../nbs/00_main.ipynb 7
# Only used for testing
use_pickle=True

if use_pickle:
    peilbuizen_df = load_pickle(settings['files']['pickle_file_input'])
else:
    peilbuizen_df = get_data_from_azuresql(sql_statement=settings['sql_statement']['peilbuizen'], 
                                       save_to_pickle=settings['files']['save_to_pickle'])

df_grouped = peilbuizen_df.groupby('project')
test_df_group = df_grouped.get_group('---')
test_name_group = 'group_name'

df_random_test = peilbuizen_df.sample(n=100)

# %% ../../nbs/00_main.ipynb 11
def create_group_route(start_address: str,
                       group_df: pd.DataFrame, 
                       route_profile: str,
                       project_name: str,
                       output_dir: str = 'output',
                       current_date: str = None,
                       ) -> None:
    """
    Create optimized route for a group and save results
    """
    if current_date is None:
        current_date = datetime.now().strftime('%Y-%m-%d')
        
    # Create output directory
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    try:
        # Get optimized route
        route_json = create_optimized_route(start_address, group_df, route_profile)
        route_coords = get_waypoint_coords(route_json)
        
        # Create route dataframe
        optimized_route = convert_routejson_to_df(route_coords, group_df)
        route_table = create_route_prev_next(optimized_route)
        
        # Create filenames
        safe_project_name = make_filesystem_friendly(project_name)
        base_filename = f"peilbuizenroute_{safe_project_name}_{current_date}"
        
        # Save Excel file
        excel_path = output_path / f"{base_filename}.xlsx"
        route_table.to_excel(excel_path)
        
        # Save URL shortcut
        url = google_maps_route_url(route_coords)
        save_route_url(url, output_dir, f"{base_filename}.url")
        
    except Exception as e:
        print(f"Error processing group {project_name}: {str(e)}")

# %% ../../nbs/00_main.ipynb 12
create_group_route(start_address=settings['calculation']['startlocation'],
                    group_df=test_df_group,
                    route_profile=settings['calculation']['distance_calculation_method'],
                    project_name=test_name_group,
                    output_dir=settings['files']['path_results'])


# %% ../../nbs/00_main.ipynb 13
def process_peilbuizen_routes(df: pd.DataFrame, 
                            start_address: str,
                            route_profile: str,
                            output_dir: str = 'output') -> None:
    """
    Process peilbuizen dataframe, create optimized routes for each group,
    and save results to Excel and URL files
    
    Args:
        df: DataFrame with peilbuizen data
        start_address: Starting location address
        output_dir: Directory to save output files
    """
    # Create output directory and setup logging
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    current_date = datetime.now().strftime('%Y-%m-%d')
    logger = setup_logging(output_dir, current_date)
        
    # Process each group
    grouped = df.groupby('project')
    total_groups = len(grouped)
    
    for project_name, group_df in tqdm(grouped, total=total_groups,desc="Processing peilbuis routes per project."):
        if len(group_df) < 4:
            msg = f"Project {project_name} heeft minder dan 3 of minder locaties. Optimale route uitrekenen is zinloos."
            print(msg)
            logger.info(msg)
        else:
            try:
                create_group_route(
                    start_address=start_address,
                    group_df=group_df,
                    route_profile=route_profile,
                    project_name=project_name,
                    output_dir=output_dir,
                    current_date=current_date
                )
                logger.info(f"Successfully processed route for project: {project_name}")
            except Exception as e:
                error_msg = f"Error processing project {project_name}: {str(e)}"
                print(error_msg)
                logger.error(error_msg)

# %% ../../nbs/00_main.ipynb 14
process_peilbuizen_routes(df=,
                         start_address=settings['calculation']['startlocation'],
                         route_profile=settings['calculation']['distance_calculation_method'],
                         output_dir=settings['files']['path_results'])
