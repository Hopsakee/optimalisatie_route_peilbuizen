"""Module die de benodigde peilbuis gegevens ophaalt uit de Azure database en voorbewerkt voor het berekenen van de optimale routes."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01_data_get.ipynb.

# %% auto 0
__all__ = ['settings', 'get_data_from_azuresql', 'load_pickle']

# %% ../../nbs/01_data_get.ipynb 3
from fastcore.utils import Path
import yaml
import pickle

from WDODAzureSQL.azure_connector_local import AzureSQLDBConnector
from .utils import get_project_root, funcresults_to_pickle, load_settings

# %% ../../nbs/01_data_get.ipynb 5
settings = load_settings()

# %% ../../nbs/01_data_get.ipynb 7
@funcresults_to_pickle(settings['files']['path_pickle_results'])
def get_data_from_azuresql(sql_statement=None, save_pickle=False):
    """
    Gets data from an Azure SQL database and returns a pandas DataFrame.

    Parameters
    ----------
    jdbc_host_name : str
        The host name of the Azure SQL database. Retrieved from settings.yaml
    jdbc_database : str
        The name of the Azure SQL database. Retrieved from settings.yaml
    meta_runinfo_table : str, optional
        The name of the table containing run info. If None, then no run info is read.
        Retrieved from settings.yaml
    sql_statement : str
        The SQL statement to read in the dimensions of the data. Can be given
        as parameter, if none is given, will be retrieved from settings.yaml

    Returns
    -------
    peilbuizen_df : pandas.DataFrame
        A pandas DataFrame containing the locations, latest measurement date and project
        of the peilbuizen
    """


    if not sql_statement:
        sql_statement = settings['sql_statement']['peilbuizen']

    print(f"\nMake connection with Azure SQL {settings['azure']['jdbc_hostname']}\n")
    db_connection = AzureSQLDBConnector(jdbc_host_name=settings['azure']['jdbc_hostname'],
                                    jdbc_database=settings['azure']['jdbc_database'],
                                    jdbc_port="1433",
                                    meta_runinfo_table=None)

    peilbuizen_df = db_connection.read_df(sql_statement)
    print(f"\nRetrieved dimensions from database {settings['azure']['jdbc_database']}.\n")

    return peilbuizen_df

# %% ../../nbs/01_data_get.ipynb 9
def load_pickle(file_path):
    with open(file_path, 'rb') as f:
        obj = pickle.load(f)

    return obj
