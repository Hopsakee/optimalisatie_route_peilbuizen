"""Module die alle de resultaten van de `route_get` aanpast naar het gewenste format en aanvult met extra gegevens zoals de URL naar google maps."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/03_data_export.ipynb.

# %% auto 0
__all__ = ['settings', 'file_path', 'file_name', 'peilbuizen_df', 'df_grouped', 'test_df', 'optimal_route', 'waypoint_coords',
           'ordered_df', 'route_prev_next', 'google_route', 'get_waypoint_coords', 'find_closest_point',
           'convert_routejson_to_df', 'google_point_url', 'create_route_prev_next', 'google_maps_route_url']

# %% ../../nbs/03_data_export.ipynb 3
from datetime import datetime
import os

import pandas as pd
import numpy as np
from fastcore.utils import L

from .route_get import create_optimized_route
from .utils import load_settings

# %% ../../nbs/03_data_export.ipynb 4
# only used for testing while developping
settings = load_settings()
settings

# %% ../../nbs/03_data_export.ipynb 5
# Used to test
from fastcore.utils import Path
from .data_get import load_pickle

file_path = settings['files']['path_pickle_results']
file_name = "get_data_from_azuresql_20250124_130111.pickle"
peilbuizen_df = load_pickle(file_path=Path(file_path) / file_name)

df_grouped = peilbuizen_df.groupby('project')
test_df = df_grouped.get_group('---')

# %% ../../nbs/03_data_export.ipynb 7
optimal_route = create_optimized_route(start_address=settings['calculation']['startlocation'],
                                       route_profile=settings['calculation']['distance_calculation_method'],
                                       df=test_df)
optimal_route

# %% ../../nbs/03_data_export.ipynb 9
def get_waypoint_coords(route):
    waypoints_idx = route['features'][0]['properties']['way_points']
    return np.array(route['features'][0]['geometry']['coordinates'])[waypoints_idx]


# %% ../../nbs/03_data_export.ipynb 10
waypoint_coords = get_waypoint_coords(optimal_route)
waypoint_coords

# %% ../../nbs/03_data_export.ipynb 11
def find_closest_point(target_lon, target_lat, df):
    distances = ((df['Longitude'] - target_lon)**2 + 
                (df['latitude'] - target_lat)**2)**0.5
    return distances.idxmin()


# %% ../../nbs/03_data_export.ipynb 12
def convert_routejson_to_df(waypoints_coords, df, remove_start=True, remove_end=True):
    """Order the input dataframe by the order of the waypoints in the route json given in the 
    route_coords parameter. If remove_start or remove_end are set to True, the first and/or last
    items from the route_coords are skipped. This makes it possible to account for a start location
    and or end location that don't have to be included in the returned route file.
    """
    start_idx = 1 if remove_start else 0
    end_idx = -1 if remove_end else None
    waypoints_coord = waypoints_coords[start_idx:end_idx]
    ordered_indices = list(map(lambda coord: find_closest_point(coord[0], coord[1], df), waypoints_coord))
    return df.loc[ordered_indices]


# %% ../../nbs/03_data_export.ipynb 13
ordered_df = convert_routejson_to_df(waypoint_coords, test_df)
ordered_df

# %% ../../nbs/03_data_export.ipynb 15
def google_point_url(lat, lon):
    if np.isnan(lat) or np.isnan(lon):
        return None
    return f"https://www.google.com/maps?q={lat},{lon}"

# %% ../../nbs/03_data_export.ipynb 16
def create_route_prev_next(route: pd.DataFrame):
    ordered_df = route.drop(columns=["latest_measure_date"], axis=1)
    previous_df = ordered_df.shift(1)
    next_df = ordered_df.shift(-1)
    
    previous_df = previous_df.drop('project', axis=1)
    next_df = next_df.drop('project', axis=1)
    
    ordered_df['URL'] = ordered_df.apply(lambda row: google_point_url(row['latitude'], row['Longitude']), axis=1)
    previous_df['URL'] = previous_df.apply(lambda row: google_point_url(row['latitude'], row['Longitude']), axis=1)
    next_df['URL'] = next_df.apply(lambda row: google_point_url(row['latitude'], row['Longitude']), axis=1)
    
    previous_df = previous_df.rename(columns=lambda x: f'vorige_{x}')
    next_df = next_df.rename(columns=lambda x: f'volgende_{x}')
    
    return pd.concat([ordered_df, previous_df, next_df], axis=1)

# %% ../../nbs/03_data_export.ipynb 17
route_prev_next = create_route_prev_next(ordered_df)
route_prev_next

# %% ../../nbs/03_data_export.ipynb 20
def google_maps_route_url(way_points_coords_lonlat):
    total_coords_latlon = [[lat, lon] for lon, lat in way_points_coords_lonlat]
    origin_g = total_coords_latlon[0]
    dest_g = total_coords_latlon[-1]
    wayp_g = total_coords_latlon[1:-1]
    
    origin_str = f"{origin_g[0]},{origin_g[1]}"
    dest_str = f"{dest_g[0]},{dest_g[1]}"
    waypoints_str = "|".join(f"{wp[0]},{wp[1]}" for wp in wayp_g)
    
    return f"https://www.google.com/maps/dir/?api=1&origin={origin_str}&destination={dest_str}&waypoints={waypoints_str}"

# %% ../../nbs/03_data_export.ipynb 21
google_route = google_maps_route_url(waypoint_coords)
google_route
