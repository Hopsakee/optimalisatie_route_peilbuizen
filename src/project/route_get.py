"""Module die alle functies bevat die nodig zijn om de snelste route te vinden langs een gegeven serie locaties."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/02_route_get.ipynb.

# %% auto 0
__all__ = ['settings', 'file_path', 'file_name', 'peilbuizen_df', 'df_grouped', 'test_df', 'client', 'start_location',
           'longlat_tpl', 'optimal_route', 'get_lonlat_start_location', 'df_to_longlat_tuple', 'create_optimized_route']

# %% ../../nbs/02_route_get.ipynb 3
from datetime import datetime
import os

import pandas as pd
import numpy as np
from fastcore.utils import L

import openrouteservice
from geopy.geocoders import Nominatim

from .data_get import get_data_from_azuresql
from .utils import load_settings

# %% ../../nbs/02_route_get.ipynb 5
# only used for testing while developping
settings = load_settings()
settings

# %% ../../nbs/02_route_get.ipynb 6
# Used to test
from fastcore.utils import Path
from .data_get import load_pickle

file_path = settings['files']['path_pickle_results']
file_name = "get_data_from_azuresql_20250124_130111.pickle"
peilbuizen_df = load_pickle(file_path=Path(file_path) / file_name)

df_grouped = peilbuizen_df.groupby('project')
test_df = df_grouped.get_group('---')

# %% ../../nbs/02_route_get.ipynb 7
client = openrouteservice.Client(key=os.environ["OPENROUTESERVICE_KEY"])

# %% ../../nbs/02_route_get.ipynb 9
def get_lonlat_start_location(address: str = "Dokter van Deenweg 186, 8025 BM, Zwolle"):
    """Get the longitude and latitude coordinates from a given adress"""
    geolocator = Nominatim(user_agent="wdodelta_route_optimizer", timeout=10)
    max_retries = 3
    retry_delay = 2

    for attempt in range(max_retries):
        try:
            location = geolocator.geocode(address)
            if location:
                return (location.longitude, location.latitude)
            else:
                print(f"Warning: Could not find coordinates for adress: {address}")
                return None
        except GeocoderTimedOut:
            if attempt < max_retries - 1:
                print(f"Warning: Geocoder timed out, attempt {attempt + 1}/{max_retries}. Retrying...")
                time.sleep(retry_delay)
            else:
                print(f"Error: Geocoder timed out after {max_retries} attempts")
                return None
        except GeocoderServiceError as e:
            print(f"Error: Geocoding service error - {str(e)}")
            return None
        except Exception as e:
            print(f"Error: Unexpected error during geocoding - {str(e)}")
            return None

def df_to_longlat_tuple(df, longitude_column, latitude_column):
    """Get the longitude and latitude coordinates from all rows in a pandas dataframe
    and return a list of longitude, latitude tuples"""
    return [(row[longitude_column], row[latitude_column]) for _, row in df.iterrows()]


# %% ../../nbs/02_route_get.ipynb 10
start_location = get_lonlat_start_location(settings['calculation']['startlocation'])
start_location

# %% ../../nbs/02_route_get.ipynb 13
longlat_tpl = df_to_longlat_tuple(test_df, longitude_column="Longitude", latitude_column="latitude")
longlat_tpl

# %% ../../nbs/02_route_get.ipynb 16
def create_optimized_route(start_address: str,
                           df: pd.DataFrame,
                           route_profile: str,
                           long_clmn: str="Longitude",
                           lat_clmn: str="latitude"):
    """Solve the traveling salesman problem (visit all given points exactly once in the 
    shortes possible route) for a given start adress and pandas dataframe with longitude
    and latitude columns."""
    start_coords = get_lonlat_start_location(start_address)
    peilbuizen_coords = df_to_longlat_tuple(df, longitude_column=long_clmn, latitude_column=lat_clmn)
    total_coords = L([start_coords] + peilbuizen_coords + [start_coords])
    return client.directions(total_coords,
                           profile=route_profile,
                           optimize_waypoints=True,
                           instructions=False,
                           geometry=True,
                           format='geojson',
                           preference='fastest',
                           radiuses=-1) # Don't restrict radius to search for routepoint near peilbuis


# %% ../../nbs/02_route_get.ipynb 21
optimal_route = create_optimized_route(start_address=settings['calculation']['startlocation'],
                                       route_profile=settings['calculation']['distance_calculation_method'],
                                       df=test_df)
optimal_route
